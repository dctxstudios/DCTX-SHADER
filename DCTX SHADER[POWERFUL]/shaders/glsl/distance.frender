// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "uniformWorldConstants.h"
#include "uniformShaderConstants.h"
#include "fragmentVersionSimple.h"
#include "uniformPerFrameConstants.h"

in highp vec3 pos;
in vec4 cloudColor;
in vec4 cloudColor2;

#define CLOUD_OCTAVES		0.45
#define CLOUD_SHARPNESS		0.0010

vec3 jodieReinhardTonemap(vec3 c) {
    float l = dot(c, vec3(0.2126, 0.7152, 0.0722));
    vec3 tc = c / (c + 0.4);
    return mix(c / (l + 1.7), tc, tc);
}

highp float hash( highp float n )
{return fract(sin(n)*43758.5453);}
highp float hash2(highp vec2 p)
{return fract(sin(p.x+p.y*382.0)*618.0);}

highp float noise(highp vec2 p){
highp vec2 i=floor(p);
highp vec2 f=fract(p);
highp vec2 u=f*f*(3.0-2.0*f);
return mix(mix(hash2(i+vec2(0.0,0.0)),hash2(i+vec2(1.0,0.0)),u.x),mix(hash2(i+vec2(0.0,1.0)),hash2(i+vec2(1.0,1.0)),u.x),u.y);}

highp float noisec( in highp vec2 x )
{
highp vec2 p = floor(x);
	highp vec2 f = fract(x);
    highp float n = p.x + p.y*57.0;
    	highp float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);
    	return 1.0 - res;
}

highp float fbm(highp vec2 p)
{
highp float cover = CLOUD_OCTAVES;
highp float sharpness = CLOUD_SHARPNESS;
highp float time = TIME;
highp float z = 3.8;
highp float rz = 0.0;
p *= 11.5;
p += vec2(4.0,2.0)*time*0.005;
for(int i = 0; i < 6; i++)
{
rz += noisec(p)/z;
z *= 2.1; p *= 2.3;
p -= time*0.006*pow(z,0.6)/2.0;
}
highp float den = 4.0 * pow(abs(rz), 2.0);
den *= 2.0;
highp float c = den - (1.0 - cover);
if( c < 0.0 )
  { c = 0.0; }
den = 1.0 - (pow(sharpness, c));
return den;
}

highp float cloudMap(highp vec2 p){
p+=TIME*0.0001;
	float f;

	f = 0.3*noise(p); 
	p = p * 3.3;	f += 0.1260*noise(p);
	p = p * 3.5;	f += 0.1375*noise(p);
	p = p * 3.7;	f += 0.0725*noise(p);

return f;}

vec4 skyColor(highp vec3 p, vec4 fc, vec4 cc){

float night = pow(max(min(1.0-fc.r*1.5,1.0),0.0),1.2);
float dusk = pow(max(min(1.0-fc.b*1.2,1.0),0.0),0.5);
float rain = (1.0 - pow(FOG_CONTROL.y, 11.0));
float rd = length(p.xz);

vec4 day_color = vec4(0.1,0.3,0.8,1.0);
vec4 night_color = vec4(0.014,0.018,0.1,0.0);
vec4 sun_color = cc*FOG_COLOR;
vec4 rain_color = FOG_COLOR*vec4(3.85,3.85,3.9,1.0);

vec4 colors = mix(mix(mix(day_color, sun_color, dusk), night_color, night),rain_color, rain);

//gradient
vec4 grad1 = mix(mix(mix(fc,fc,dusk),fc,night),fc,rain);
vec4 grad2 = mix(mix(mix(fc,fc,dusk),fc,night),fc,rain);
vec4 grad3 = mix(mix(mix(fc,vec4(1.0,0.9,0.7,1.0),dusk),vec4(0.1,0.15,0.25,1.0),night),rain_color,rain);
vec4 grad4 = mix(mix(mix(fc,vec4(0.9,0.8,0.5,1.0),dusk),vec4(0.07,0.1,0.2,1.0),night),rain_color,rain);
vec4 grad5 = mix(mix(mix(fc,vec4(0.9,0.7,0.8,1.0),dusk),vec4(0.04,0.08,0.15,1.0),night),rain_color,rain);
vec4 grad6 = mix(mix(mix(colors,vec4(0.8,0.6,0.7,1.0),dusk),vec4(0.015,0.025,0.1,1.0),night),rain_color,rain);
vec4 grad7 = mix(mix(mix(colors,vec4(0.6,0.5,0.8,1.0),dusk),vec4(0.07,0.1,0.2,1.0),night),rain_color,rain);
vec4 grad8 = mix(mix(mix(colors,vec4(0.4,0.3,0.7,1.0),dusk),vec4(0.04,0.08,0.15,1.0),night),rain_color,rain);
vec4 grad9 = mix(mix(mix(colors,vec4(0.3,0.2,0.6,1.0),dusk),vec4(0.015,0.025,0.1,1.0),night),rain_color,rain);
vec4 grad10 = mix(mix(mix(colors,vec4(.0,0.,0.5,1.0),dusk),vec4(0.015,0.025,0.1,1.0),night),fc,rain);

vec4 cloud_color= cloudColor2;
cloud_color.a=smoothstep(0.3,1.0,cloudMap(pos.xz*10.0));
vec4 sky_color= mix(colors,grad10,pow(clamp(rd*1.5,0.0,1.0),2.0));
sky_color = mix(sky_color, grad9, pow(clamp(rd*1.47,0.0,1.0),2.2));
sky_color = mix(sky_color, grad8, pow(clamp(rd*1.43,0.0,1.0),2.1));
sky_color = mix(sky_color, grad7, pow(clamp(rd*1.39,0.0,1.0),2.2));
sky_color = mix(sky_color, grad6, pow(clamp(rd*1.35,0.0,1.0),2.1));
sky_color = mix(sky_color, grad5, pow(clamp(rd*1.32,0.0,1.0),2.2));
sky_color = mix(sky_color, grad4, pow(clamp(rd*1.3,0.0,1.0),2.3));
sky_color.rgb = jodieReinhardTonemap(sky_color.rgb);
sky_color = mix(sky_color, grad3, pow(clamp(rd*1.2,0.0,1.0),3.2));
sky_color = mix(sky_color, grad2, pow(clamp(rd*1.1,0.0,1.0),2.0));
sky_color=mix(sky_color,cloud_color,cloud_color.a);
sky_color = mix(sky_color, grad1, pow(clamp(rd*1.0,0.0,1.0),2.0));

return sky_color;}

void main(){

vec4 result = skyColor(pos,FOG_COLOR, CURRENT_COLOR);
float rd = length(pos.xz);
highp vec3 p = pos;
vec4 cc = cloudColor;
float cm = fbm(p.xz*1.0);

float layer = 0.0, ya = 1.0, ya2 = ya;

for(int i = 0; i < 8; i++)
{
if(cm>0.){
layer += (ya * max(cm-fbm(p.xz*0.95),0.)) * 0.1;
p /= 1.02;
layer += ya * sin(layer * 2.0);
   }
cc *= mix(0.9,0.975,layer * pow(length(p.xz) * .8, 0.7));
}

gl_FragColor = mix(result, cc, cm*1.4*(1.0-clamp(rd*1.3,0.0,1.0)));

}